import tensorflow as tf
from tensorflow.keras.layers import *
from tensorflow.keras.applications.vgg16 import *

def fcn(img_size, ch_out=151):
    
    inputs = Input(shape=(img_size, img_size, 3))

    # Building a pre-trained VGG-16 feature extractor (i.e., without the final FC layers)
    vgg16 = VGG16(include_top=False, weights='imagenet', input_tensor=inputs)
    # Recovering the feature maps generated by each of the 3 final blocks:
    f3 = vgg16.get_layer('block3_pool').output  
    f4 = vgg16.get_layer('block4_pool').output  
    f5 = vgg16.get_layer('block5_pool').output  

    # Replacing VGG dense layers by convolutions:
    f5_c1 = Conv2D(filters=4086, kernel_size=7, padding='same', activation='relu')(f5)
    f5_d1 = Dropout(0.3)(f5_c1)
    f5_c2 = Conv2D(filters=4086, kernel_size=1, padding='same', activation='relu')(f5_d1)
    f5_d2 = Dropout(0.3)(f5_c2)
    f5_c3 = Conv2D(filters=ch_out, kernel_size=1, padding='same', activation=None)(f5_d2)


    # Using a transposed conv (w/ s=2) to upscale `f5` into a 14 x 14 map
    # so it can be merged with features from `f4_conv1` obtained from `f4`:
    f5_c3_x2 = Conv2DTranspose(filters=ch_out, kernel_size=4, strides=2, use_bias=False, padding='same', activation='relu')(f5)
    f4_c1 = Conv2D(filters=ch_out, kernel_size=1, padding='same', activation=None)(f4)

    # Merging the 2 feature maps (addition):
    m1 = add([f4_c1, f5_c3_x2])

    # We repeat the operation to merge `merge1` and `f3` into a 28 x 28 map:
    m1_x2 = Conv2DTranspose(filters=ch_out, kernel_size=4, strides=2, use_bias=False, padding='same', activation='relu')(m1)
    f3_c1 = Conv2D(filters=ch_out, kernel_size=1, padding='same', activation=None)(f3)
    m2 = add([f3_c1, m1_x2])

    # Finally, we use another transposed conv to decode and up-scale the feature map
    # to the original shape, i.e., using a stride 8 to go from 28 x 28 to 224 x 224 here:
    outputs = Conv2DTranspose(filters=ch_out, kernel_size=16, strides=8, padding='same', activation=None)(m2)
    
    model = tf.keras.Model(inputs = inputs, outputs = outputs)

    return model